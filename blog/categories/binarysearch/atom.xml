<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Binarysearch | regenthypo's Blog]]></title>
  <link href="http://www.regenthypo.com/blog/categories/binarysearch/atom.xml" rel="self"/>
  <link href="http://www.regenthypo.com/"/>
  <updated>2016-07-26T21:20:33+08:00</updated>
  <id>http://www.regenthypo.com/</id>
  <author>
    <name><![CDATA[regenthypo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Leetcode240 Search a 2D Matrix II [BinarySearch]]]></title>
    <link href="http://www.regenthypo.com/blog/2016/03/15/leetcode240-search-a-2d-matrix-ii-binarysearch/"/>
    <updated>2016-03-15T16:19:57+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/03/15/leetcode240-search-a-2d-matrix-ii-binarysearch</id>
    <content type="html"><![CDATA[<p>Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:</p>

<p>Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
For example,</p>

<p>Consider the following matrix:</p>

<p>[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.</p>

<p>Given target = 20, return false.</p>

<p>Difficulty: Medium</p>

<p><img src="/images/240.jpg"></p>

<pre><code class="java">package com.hypo.BinarySearch;

public class Search2DMatrixII_T240
{
    private boolean searchMatrix(int[][] matrix, int target) 
    {
        if(matrix == null || matrix.length &lt; 1 || matrix[0].length &lt; 1) return false;

        int row = 0;
        int col = matrix[0].length - 1;

        while(col &gt;= 0 &amp;&amp; row &lt; matrix.length)
        {
            if(target == matrix[row][col])
            {
                return true;
            }
            else if(target &gt; matrix[row][col])
            {
                row++;
            }
            else
            {
                col--;
            }
        }
        return false;
    }

//  test
    public static void main(String[] args)
    {
        Search2DMatrixII_T240 t240 = new Search2DMatrixII_T240();

        int[][] matrix = {

                 {1,   4,  7, 11, 15},
                  {2,   5,  8, 12, 19},
                  {3,   6,  9, 16, 22},
                  {10, 13, 14, 17, 24},
                  {18, 21, 23, 26, 30}
        };

        int target = 5;


        System.out.println(t240.searchMatrix(matrix, target));
    }
}
</code></pre>

<p>运行结果:
<img src="/images/240_2.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode74 Search a 2D Matrix [BinarySearch]]]></title>
    <link href="http://www.regenthypo.com/blog/2016/03/15/leetcode74-search-a-2d-matrix-binarysearch/"/>
    <updated>2016-03-15T15:49:40+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/03/15/leetcode74-search-a-2d-matrix-binarysearch</id>
    <content type="html"><![CDATA[<p>Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:</p>

<p>Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,</p>

<p>Consider the following matrix:</p>

<p>[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.</p>

<p>Difficulty: Medium</p>

<p><img src="/images/74.jpg"></p>

<pre><code class="java">package com.hypo.BinarySearch;

public class Search2DMatrix_T74
{
    private boolean searchMatrix(int[][] matrix, int target) 
    {
        int row = matrix.length;
        int col = matrix[0].length;
        if(matrix == null || row &lt; 1 || col &lt; 1) return false;

        for(int i = 0 ; i &lt; row ; i++)
        {
            int ret = BinarySearch(matrix[i] , target);

            if(ret &gt;= 0)
            {
                return true;
            }
            else if(ret == -col - 1)
            {
                continue;
            }
            else
            {
                return false;
            }
        }

        return false;
    }

    private int BinarySearch(int[] a , int key)//二分查找模板2JDK版
    {
        int low = 0;
        int high = a.length - 1;

        while (low &lt;= high) 
        {
            int mid = (low + high) &gt;&gt;&gt; 1;
            int midVal = a[mid];

            if (midVal &lt; key)
                low = mid + 1;
            else if (midVal &gt; key)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found.
//   如果它包含在数组中，则返回搜索键的索引；否则返回 (-(插入点) - 1)。插入点 被定义为将键插入数组的那一点：
//   即第一个大于此键的元素索引，如果数组中的所有元素都小于指定的键，则为 a.length。
//   注意，这保证了当且仅当此键被找到时，返回的值将 &gt;= 0。
    }


//    test
    public static void main(String[] args)
    {
        Search2DMatrix_T74 t74 = new Search2DMatrix_T74();

        int[][] matrix = {

                  {1,   3,  5,  7},
                  {10, 11, 16, 20},
                  {23, 30, 34, 50}
        };

        int target = 9;
        System.out.println(t74.searchMatrix(matrix, target));
    }
}
</code></pre>

<p>运行结果:
<img src="/images/74_2.jpg"></p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Array | regenthypo's Blog]]></title>
  <link href="http://www.regenthypo.com/blog/categories/array/atom.xml" rel="self"/>
  <link href="http://www.regenthypo.com/"/>
  <updated>2016-07-08T19:29:04+08:00</updated>
  <id>http://www.regenthypo.com/</id>
  <author>
    <name><![CDATA[regenthypo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Leetcode54 Spiral Matrix [Array]]]></title>
    <link href="http://www.regenthypo.com/blog/2016/03/15/leetcode54-spiral-matrix-array/"/>
    <updated>2016-03-15T15:50:47+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/03/15/leetcode54-spiral-matrix-array</id>
    <content type="html"><![CDATA[<p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.</p>

<p>For example,
Given the following matrix:</p>

<p>[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
You should return [1,2,3,6,9,8,7,4,5].</p>

<p>Difficulty: Medium</p>

<p><img src="/images/54.jpg"></p>

<pre><code class="java">package com.hypo.Array;

import java.util.ArrayList;
import java.util.List;

public class SpiralMatrix_T54
{
    private List&lt;Integer&gt; spiralOrder(int[][] matrix) 
    {
        List&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();

        if(matrix.length == 0) return result;

        int rowBegin = 0;
        int rowEnd = matrix.length - 1;
        int colBegin = 0;
        int colEnd = matrix[0].length - 1;

//      先向右遍历，一行遍历完，rowBegin加1 Step1;
//      再向下遍历，一列遍历完，colEnd减1   Step2;
//      再向左遍历，一行遍历完，rowEnd减1   Step3;
//      再向上遍历，一列遍历完，colBegin加1 Step4;
//      然后重复上面4步，直到二维数组全部遍历完.
        while(rowBegin &lt;= rowEnd &amp;&amp; colBegin &lt;= colEnd)
        {
            //向右
            for(int r = colBegin ; r &lt;= colEnd ; r++)
            {
                result.add(matrix[rowBegin][r]);
            }
            rowBegin++;//一行遍历完

            //向下
            for(int d = rowBegin ; d &lt;= rowEnd ; d++)
            {
                result.add(matrix[d][colEnd]);
            }
            colEnd--;//一列遍历完

            //向左
            if(rowBegin &lt;= rowEnd)
            {
                for(int l = colEnd ; l &gt;= colBegin ; l--)
                {
                    result.add(matrix[rowEnd][l]);
                }
            }
            rowEnd--;//一行遍历完

            //向上
            if(colBegin &lt;= colEnd)
            {
                for(int u = rowEnd ; u &gt;= rowBegin ; u--)
                {
                    result.add(matrix[u][colBegin]);
                }
            }
            colBegin++;//一列遍历完
        }

        return result;
    }

//    test
    public static void main(String[] args)
    {
        SpiralMatrix_T54 t54  = new SpiralMatrix_T54();

        int[][] matrix = {
                            { 1, 2, 3 },
                            { 4, 5, 6 },
                            { 7, 8, 9 }
                          };

        List&lt;Integer&gt; result = t54.spiralOrder(matrix);
        for(int i : result)
        {
            System.out.print(i + " ");
        }
    }
}
</code></pre>

<p>运行结果:
<img src="/images/54_2.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode229 Majority Element II]]></title>
    <link href="http://www.regenthypo.com/blog/2016/03/12/leetcode229-majority-element-ii/"/>
    <updated>2016-03-12T00:46:19+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/03/12/leetcode229-majority-element-ii</id>
    <content type="html"><![CDATA[<pre><code class="java">package com.hypo.Array;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

//给定大小为n的数组，找出其中出现次数超过[n/3]次的元素 
//要求线性时间，空间复杂度O(1)
public class MajorityElementII_T229
{
    //暴力破解
    public List&lt;Integer&gt; majorityElement(int[] nums) //这个不是线性时间
    {
        List&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();
        int times = nums.length / 3 ;//数组元素小于3个是times = 0要特殊处理

        Arrays.sort(nums);//n*log(n) 改进的快速排序

        for(int i = 0 ; i &lt; nums.length ;)
        {
            if(i + times &lt; nums.length)
            {
                if(nums[i] == nums[i + times])
                {
                    if(!res.contains(nums[i]))
                    {
                        res.add(nums[i]);
                    }
                    if(times == 0)//times = 0要特殊处理
                    {
                        i++;
                    }
                    else
                    {
                        i += times ;
                    }
                }
                else
                {
                    i++;
                }
            }
            else
            {
                break;
            }
        }

        return res;
    }

//  Majority Vote algorithm  //多数投票算法
    public List&lt;Integer&gt; majorityElement2(int[] nums)//O(n)时间,O(1)空间
    {
//      多数投票算法
//      数组中至多可能会有2个出现次数超过 [n/3] 的众数
        List&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();

        int times = nums.length / 3 ;

        int n1 = 1 ; //候选众数1
        int n2 = 1 ; //候选众数2
        int c1 = 0;//候选众数1出现的次数
        int c2 = 0;//候选众数2出现的次数

        for(int n : nums)//第一步：找出数组出现次数最多的两个数，即选出两个众数
        {
            if(n1 == n)
            {
                c1++;
            }
            else if(n2 == n)
            {
                c2++;
            }
            else if(c1 == 0)
            {
                n1 = n;
                c1 = 1;
            }
            else if(c2 == 0)
            {
                n2 = n;
                c2 = 1;
            }
            else
            {
                c1--;
                c2--;
            }
        }

//      第二步：判断两个众数出现的次数是否符合要求
        int count1 = 0;//众数n1在数组中出现的次数
        int count2 = 0;//众数n2在数组中出现的次数

        for(int m : nums)
        {
            if(m == n1)
            {
                count1++;
            }
            else if(m == n2)
            {
                count2++;
            }
        }

        if(count1 &gt; times)
        {
            res.add(n1);
        }

        if(count2 &gt; times)
        {
            res.add(n2);
        }

        return res;
    }

//  test
    public static void main(String[] args)
    {
        // TODO Auto-generated method stub
        MajorityElementII_T229 t229 = new MajorityElementII_T229();

//      int[] nums = {1,1,1,1,1,2,2,2,2,2,2,2,2,2,2};
        int[] nums2 = {1,1,1,1,1,1,1};
        ArrayList&lt;Integer&gt; result = (ArrayList&lt;Integer&gt;)t229.majorityElement2(nums2);

        for(int i = 0 ;i &lt; result.size() ;  i++)
        {
            System.out.println(result.get(i) + " ");
        }
    }

}
</code></pre>
]]></content>
  </entry>
  
</feed>

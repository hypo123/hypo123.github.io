<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 设计模式 | regenthypo's Blog]]></title>
  <link href="http://www.regenthypo.com/blog/categories/she-ji-mo-shi/atom.xml" rel="self"/>
  <link href="http://www.regenthypo.com/"/>
  <updated>2016-07-21T15:55:02+08:00</updated>
  <id>http://www.regenthypo.com/</id>
  <author>
    <name><![CDATA[regenthypo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一天一设计模式之代理模式[17]]]></title>
    <link href="http://www.regenthypo.com/blog/2016/07/21/proxy-design-pattern/"/>
    <updated>2016-07-21T15:24:50+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/07/21/proxy-design-pattern</id>
    <content type="html"><![CDATA[<h2>静态代理</h2>

<p><font color=#FF0000><strong>[结构型模式]</strong></font></p>

<p><font color=#FF0000><strong>为其他对象提供一种代理以控制对这个对象的访问.</strong></font></p>

<p><strong>代理模式结构</strong><br>
<img src="/images/proxydp1.jpg"></p>

<p><strong>代理模式角色</strong><br>
<img src="/images/proxydp2.jpg"></p>

<p><strong>代理模式代码</strong></p>

<p><strong>抽象主题</strong>
<code>java
/**
 *  抽象主题角色
 */
public abstract class Subject
{
    public abstract void request();
}
</code></p>

<p><strong>真实主题</strong>
<code>java
/**
 *  真实主题角色
 */
public class RealSubject extends Subject
{
    @Override
    public void request()
    {
        System.out.println("from real subject");
    }
}
</code></p>

<p><strong>代理主题</strong>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span>  <span class="n">代理主题角色</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProxySubject</span> <span class="kd">extends</span> <span class="n">Subject</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="c1">//代理对象含有RealSubject对象的引用</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">RealSubject</span> <span class="n">realsubject</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  请求前操作 </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">preRequest</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;prerequest!&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  请求后操作 </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">postRequest</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;postrequest&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 实现请求方法</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">request</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">preRequest</span><span class="o">();</span><span class="c1">//可插入业务代码</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">realsubject</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">realsubject</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RealSubject</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">realsubject</span><span class="o">.</span><span class="na">request</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">postRequest</span><span class="o">();</span><span class="c1">//可插入业务代码</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>测试</strong>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">test</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ProxySubject</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">subject</span><span class="o">.</span><span class="na">request</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>动态代理</h2>

<p>//TODO</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一天一设计模式之状态模式[16]]]></title>
    <link href="http://www.regenthypo.com/blog/2016/07/21/state-design-pattern/"/>
    <updated>2016-07-21T14:31:13+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/07/21/state-design-pattern</id>
    <content type="html"><![CDATA[<p><font color=#FF0000><strong>[行为模式]</strong></font></p>

<p><font color=#FF0000><strong>允许一个对象在其内部状态改变时改变它的行为,看起来似乎修改了它的类.</strong></font></p>

<p><font color=#FF0000><strong>别名:状态对象(Objects for States)</strong></font></p>

<p><strong>状态模式结构</strong><br>
<img src="/images/statedp1.jpg"></p>

<p><strong>状态模式角色</strong><br>
<img src="/images/statedp2.jpg"></p>

<p><strong>状态模式代码</strong></p>

<p><strong>抽象状态</strong><br>
<code>java
/**
 *  抽象状态角色
 */
public interface State
{
    //定义与Context一个特定状态相关的行为
    public void operation();
}
</code></p>

<p><strong>具体状态</strong><br>
<code>java
/**
 *  具体状态角色
 */
public class ConcreteState1 implements State
{
    @Override
    public void operation()
    {
        System.out.println("state1 operation!");
    }
}
</code></p>

<p><strong>具体状态</strong><br>
<code>java
/**
 *  具体状态角色
 */
public class ConcreteState2 implements State
{
    @Override
    public void operation()
    {
        System.out.println("state2 operation!");
    }
}
</code></p>

<p><strong>具体状态</strong><br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span>  <span class="n">具体状态角色</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConcreteState3</span> <span class="kd">implements</span> <span class="n">State</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">operation</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">state3</span> <span class="n">operation</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">**</span><span class="n">环境</span><span class="o">**&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">br</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span>  <span class="n">环境角色</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Context</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="c1">//环境类持有一个具体状态类的实例</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">State</span> <span class="n">state</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//环境类与状态类之间是聚合关系</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setState</span><span class="o">(</span><span class="n">State</span> <span class="n">state</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">operation</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="c1">//当持有的具体状态类不同时,该操作产生不同的行为</span>
</span><span class='line'>    <span class="n">state</span><span class="o">.</span><span class="na">operation</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>客户端</strong><br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">Context</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Context</span><span class="o">();</span><span class="c1">//环境类&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">ConcreteState1</span> <span class="n">state1</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ConcreteState1</span><span class="o">();</span><span class="c1">//具体状态1</span>
</span><span class='line'>    <span class="n">ConcreteState2</span> <span class="n">state2</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ConcreteState2</span><span class="o">();</span><span class="c1">//具体状态2</span>
</span><span class='line'>    <span class="n">ConcreteState3</span> <span class="n">state3</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ConcreteState3</span><span class="o">();</span><span class="c1">//具体状态3</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="n">state1</span><span class="o">);</span><span class="c1">//设定环境状态</span>
</span><span class='line'>    <span class="n">context</span><span class="o">.</span><span class="na">operation</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;------------------------------&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="n">state2</span><span class="o">);</span><span class="c1">//设定环境状态</span>
</span><span class='line'>    <span class="n">context</span><span class="o">.</span><span class="na">operation</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;------------------------------&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="n">state3</span><span class="o">);</span><span class="c1">//设定环境状态</span>
</span><span class='line'>    <span class="n">context</span><span class="o">.</span><span class="na">operation</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;------------------------------&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>运行结果</strong><br>
<img src="/images/statedp3.jpg"></p>

<p><strong>状态模式适用情况</strong><br>
<img src="/images/statedp4.jpg"></p>

<p><strong>状态模式效果</strong><br>
<img src="/images/statedp5.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一天一设计模式之观察者模式[15]]]></title>
    <link href="http://www.regenthypo.com/blog/2016/07/21/observer-design-pattern/"/>
    <updated>2016-07-21T12:58:41+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/07/21/observer-design-pattern</id>
    <content type="html"><![CDATA[<p><font color=#FF0000><strong>[行为模式]</strong></font></p>

<p><font color=#FF0000><strong>定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时,所有依赖于它的对象都得到通知并被自动更新.</strong></font></p>

<p><font color=#FF0000><strong>别名:依赖(Dependents),发布-订阅(Publish-Subscribe)</strong></font></p>

<p><img src="/images/observerdp0.jpg"></p>

<p><strong>观察者模式结构</strong><br>
<img src="/images/observerdp1.jpg"></p>

<p><strong>观察者模式角色</strong><br>
<img src="/images/observerdp2.jpg"></p>

<p><strong>观察者模式代码</strong></p>

<p><strong>抽象观察者</strong><br>
<code>java
/**
 *  抽象观察者角色.
 */
public interface Observer
{
    /**
     *  调用这个方法会更新自己.
     */
    void update();
}
</code></p>

<p><strong>具体观察者</strong><br>
<code>java
/**
 *  具体观察者角色.
 */
public class ConcreteObserver implements Observer
{
    /**
     *  调用这个方法会更新自己.
     */
    @Override
    public void update()
    {
        System.out.println("I'm notified!");
    }
}
</code></p>

<p><strong>抽象目标</strong><br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">/&lt;</span><span class="n">strong</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span>  <span class="n">抽象主题角色</span>
</span><span class='line'> <span class="o">*/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Subject</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="o">/&lt;/</span><span class="n">strong</span><span class="o">&gt;</span>
</span><span class='line'>     <span class="o">*</span>  <span class="n">调用这个方法登记一个新的观察者对象</span>
</span><span class='line'>     <span class="o">*/</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">attach</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  调用这个方法删除一个已登记的观察者对象 </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">detach</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  调用这个方法通知所有已登记的观察者. </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>具体目标</strong><br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span>  <span class="n">具体主题角色</span><span class="o">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConcreteSubject</span> <span class="kd">implements</span> <span class="n">Subject</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Observer</span><span class="o">&gt;</span> <span class="n">observers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Observer</span><span class="o">&gt;();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  调用这个方法登记一个新的观察者对象</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">attach</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">observers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  调用这个方法删除一个已登记的观察者对象 </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">detach</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">observers</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  调用这个方法通知所有已登记的观察者. </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">Iterator</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Observer</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">observers</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span><span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">().</span><span class="na">update</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>测试</strong><br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">test</span>
</span><span class='line'><span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">Observer</span> <span class="n">o1</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ConcreteObserver</span><span class="o">();</span><span class="c1">//观察者</span>
</span><span class='line'>    <span class="n">Observer</span> <span class="n">o2</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ConcreteObserver</span><span class="o">();</span><span class="c1">//观察者</span>
</span><span class='line'>    <span class="n">Observer</span> <span class="n">o3</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ConcreteObserver</span><span class="o">();</span><span class="c1">//观察者</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Subject</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ConcreteSubject</span><span class="o">();</span><span class="c1">//目标</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">s1</span><span class="o">.</span><span class="na">attach</span><span class="o">(</span><span class="n">o1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">s1</span><span class="o">.</span><span class="na">attach</span><span class="o">(</span><span class="n">o2</span><span class="o">);</span>
</span><span class='line'>    <span class="n">s1</span><span class="o">.</span><span class="na">attach</span><span class="o">(</span><span class="n">o3</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">s1</span><span class="o">.</span><span class="na">notifyObservers</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;--------------------------&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">s1</span><span class="o">.</span><span class="na">detach</span><span class="o">(</span><span class="n">o3</span><span class="o">);</span>
</span><span class='line'>    <span class="n">s1</span><span class="o">.</span><span class="na">notifyObservers</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;--------------------------&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>运行结果</strong><br>
<img src="/images/observerdp3.jpg"></p>

<p><strong>观察者模式优缺点</strong><br>
<img src="/images/observerdp4.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一天一设计模式之装饰模式[14]]]></title>
    <link href="http://www.regenthypo.com/blog/2016/07/20/decorator-design-pattern/"/>
    <updated>2016-07-20T21:01:14+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/07/20/decorator-design-pattern</id>
    <content type="html"><![CDATA[<p><font color=#FF0000><strong>[结构型模式]</strong></font></p>

<p><font color=#FF0000><strong>动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更为灵活.</strong></font></p>

<p><font color=#FF0000><strong>别名:包装器 Wrapper</strong></font></p>

<p><strong>装饰模式结构</strong><br>
<img src="/images/decoratordp1.jpg"></p>

<p><strong>装饰模式的角色</strong><br>
<img src="/images/decoratordp2.jpg"></p>

<p><strong>装饰模式代码</strong></p>

<p><strong>抽象组件</strong><br>
<code>java
/**
 *  抽象构件角色
 */
public interface Component
{
    public void sampleOperation();
}
</code></p>

<p><strong>具体组件</strong><br>
<code>java
/**
 *  具体构件角色
 *  可以给具体组件上添加各种装饰
 */
public class ConcreteComponent implements Component
{   
    @Override
    public void sampleOperation()
    {
        System.out.println("具体组件");
    }
}
</code></p>

<p><strong>装饰角色</strong><br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span>  <span class="n">装饰角色</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span>  <span class="n">装饰角色类实现组件接口</span><span class="o">,</span><span class="n">与具体组件类之间是聚合关系</span><span class="o">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Decorator</span> <span class="kd">implements</span> <span class="n">Component</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Component</span> <span class="n">component</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//装饰角色类和组件类之间是聚合关系</span>
</span><span class='line'><span class="c1">//有参构造函数</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">Decorator</span><span class="o">(</span><span class="n">Component</span> <span class="n">component</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">component</span> <span class="o">=</span> <span class="n">component</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//无参构造函数</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">Decorator</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//实现抽象组件的方法</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">sampleOperation</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">component</span><span class="o">.</span><span class="na">sampleOperation</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>具体装饰A</strong><br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span>  <span class="n">具体装饰角色</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConcreteDecoratorA</span> <span class="kd">extends</span> <span class="n">Decorator</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="c1">//与组件之间是聚合关系</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ConcreteDecoratorA</span><span class="o">(</span><span class="n">Component</span> <span class="n">component</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">component</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">sampleOperation</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">sampleOperation</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;给组件添加装饰A&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>具体装饰B</strong><br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span>  <span class="n">具体装饰角色</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConcreteDecoratorB</span> <span class="kd">extends</span> <span class="n">Decorator</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="c1">//与组件之间是聚合关系</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ConcreteDecoratorB</span><span class="o">(</span><span class="n">Component</span> <span class="n">component</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">component</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">sampleOperation</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">sampleOperation</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;给组件添加装饰B&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>测试类</strong><br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">mytest</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">Component</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ConcreteComponent</span><span class="o">();</span><span class="c1">//没有装饰的组件&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">Component</span> <span class="n">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ConcreteDecoratorA</span><span class="o">(</span><span class="n">c</span><span class="o">);</span><span class="c1">//添加了一个装饰A的组件</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">Component</span> <span class="n">e</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ConcreteDecoratorB</span><span class="o">(</span><span class="n">d</span><span class="o">);</span><span class="c1">//添加了装饰A和装饰B的组件</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">c</span><span class="o">.</span><span class="na">sampleOperation</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;---------------------&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">d</span><span class="o">.</span><span class="na">sampleOperation</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;---------------------&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">sampleOperation</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;---------------------&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Component</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ConcreteDecoratorB</span><span class="o">(</span><span class="k">new</span> <span class="nf">ConcreteDecoratorA</span><span class="o">(</span><span class="k">new</span> <span class="nf">ConcreteComponent</span><span class="o">()));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="na">sampleOperation</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;---------------------&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>运行结果</strong><br>
<img src="/images/decoratordp3.jpg"></p>

<p><strong>装饰模式优点</strong><br>
<img src="/images/decoratordp4.jpg"></p>

<p><strong>装饰模式缺点</strong><br>
<img src="/images/decoratordp5.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一天一设计模式之适配器模式[13]]]></title>
    <link href="http://www.regenthypo.com/blog/2016/07/20/adapter-design-pattern/"/>
    <updated>2016-07-20T19:38:22+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/07/20/adapter-design-pattern</id>
    <content type="html"><![CDATA[<p><font color=#FF0000><strong>[结构型模式]</strong></font></p>

<p><font color=#FF0000><strong>将一个类的接口转换成客户希望的另外一个接口，适配器模式使得原本由于接口 不兼容而 不能一起工作的哪些类可以一起工作.</strong></font></p>

<p><font color=#FF0000><strong>别名:包装器 Wrapper</strong></font></p>

<p><strong>类的适配器模式结构</strong><br>
<img src="/images/adapterdp1.jpg"></p>

<p><strong>对象的适配器模式结构</strong><br>
<img src="/images/adapterdp2.jpg"></p>

<p><strong>类的适配器模式角色</strong><br>
<img src="/images/adapterdp3.jpg"></p>

<p><strong>对象的适配器模式角色</strong><br>
<img src="/images/adapterdp4.jpg"></p>

<p><strong>类的适配器模式代码</strong></p>

<pre><code class="java ">/**
 *  源角色 
 */
public class Adaptee
{
    /**
     *  源类含有的方法 sampleOperation1
     */
    public void sampleOperation1()
    {
        System.out.println("oper1...");
    }
}
</code></pre>

<pre><code class="java ">/**
 *  目标角色
 */
public interface Target
{
    //这是源类也有的方法
    void sampleOperation1();

    //这是源类没有的方法
    void sampleOperation2();

}
</code></pre>

<pre><code class="java ">/**
 *  适配器角色 
 *  适配器将源接口转换成目标接口
 *
 *  类的适配器类继承源角色类来提供源角色类已有的方法,
 *  实现目标角色接口来添加目标角色有而源角色没有的方法.
 */
public class Adapter extends Adaptee implements Target
{
    //源角色也有的方法
    @Override
    public void sampleOperation1()
    {
        super.sampleOperation1();
    }

    /**
     * 源类Adaptee没有此方法,由适配器类添加
     */
    @Override
    public void sampleOperation2()
    {
        System.out.println("oper2...");
    }
}
</code></pre>

<pre><code class="java ">//测试
public class test
{
    private final static Target tar = new Adapter();

    public static void main(String[] args)
    {
        tar.sampleOperation1();
        tar.sampleOperation2();
    }

}
</code></pre>

<p><strong>对象的适配器模式代码</strong></p>

<pre><code class="java">/**
 *  源角色 
 */
public class Adaptee
{
    //源类有方法sampleOperation1
    public void sampleOperation1()
    {
        System.out.println("源角色自有方法sampleOperation1.");
    }
}
</code></pre>

<pre><code class="java">/**
 *  目标角色 
 */
public interface Target
{
    //源类也有的方法sampleOperation1
    void sampleOperation1();

    //源类没有的方法sampleOperation2
    void sampleOperation2();
}
</code></pre>

<pre><code class="java">/**
 *  适配器角色 
 */
public class Adapter implements Target
{
    private Adaptee adaptee;//源角色类

    //适配器类和源角色类之间是聚合关系.
    public Adapter(Adaptee adaptee)
    {
        this.adaptee = adaptee;
    }

    //源类也有的方法sampleOperation1
    @Override
    public void sampleOperation1()
    {
        adaptee.sampleOperation1();
    }

    //源类没有的方法,由适配器类来补充此方法
    @Override
    public void sampleOperation2()
    {
        System.out.println("适配器类增补方法sampleOperation2.");
    }
}
</code></pre>

<pre><code class="java">//测试
public class test2_1
{
    public static void main(String[] args)
    {
        Target target = new Adapter(new Adaptee());

        target.sampleOperation1();
        target.sampleOperation2();
    }
}
</code></pre>

<p><strong>适配器模式适用情况</strong><br>
<img src="/images/adapterdp4.jpg"></p>
]]></content>
  </entry>
  
</feed>

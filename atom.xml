<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[regenthypo's Blog]]></title>
  <link href="http://www.regenthypo.com/atom.xml" rel="self"/>
  <link href="http://www.regenthypo.com/"/>
  <updated>2016-05-04T08:58:49+08:00</updated>
  <id>http://www.regenthypo.com/</id>
  <author>
    <name><![CDATA[regenthypo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lintcode417 有效数字]]></title>
    <link href="http://www.regenthypo.com/blog/2016/04/23/lintcode417-valid-number/"/>
    <updated>2016-04-23T20:26:52+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/04/23/lintcode417-valid-number</id>
    <content type="html"><![CDATA[<p>题目:给定一个字符串，验证其是否为数字<br></p>

<p>例子:<br>
&ldquo;0&rdquo; => true <br>
&ldquo; 0.1 &rdquo; => true <br>
&ldquo;abc&rdquo; => false <br>
&ldquo;1 a&rdquo; => false <br>
&ldquo;2e10&rdquo; => true <br></p>

<p>解题思路:使用有限状态自动机解题.<br></p>

<p>1.整数:<br></p>

<p><img src="http://www.regenthypo.com/images/lintcode417_1.jpg"></p>

<p>该有限自动机(DFA)有s1,s2,s3三个状态。s1为起始状态,s3为合法结束状态.<br>
如果输入字符串最后停在状态s3(同心圆),则该字符串表示的数字时合法的.<br>
如果输入字符串最后没有停在状态s3(同心圆),则该字符串是非法的.<br>
如果输入的字符串出现了未在DFA中表示的字符,则跳到错误状态，表示该字符串不合法.<br></p>

<p>2.整数和小数<br></p>

<p><img src="http://www.regenthypo.com/images/lintcode417_2.jpg"></p>

<p>需注意,&ldquo;.3"或"3."都是合法的小数(分别表示0.3和3.0)，但单独一个”.”符号则是非法的。</p>

<p>3.整数、小数和科学计数法<br></p>

<p><img src="http://www.regenthypo.com/images/lintcode417_3.jpg"></p>

<p>表示有限状态自动机的方法有很多，可以用一个二维数组，数组中存储的是相应的输入所应该跳转到的状态位置。或者是用函数表示法，每个状态用一个函数表示，状态的转移用函数的调用表示.<br></p>

<p>解法一:使用函数表示<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//用有限自动机解题DFA</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValidNumber</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isNumber</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">state1</span><span class="o">(</span><span class="n">s</span> <span class="o">,</span> <span class="mi">0</span><span class="o">);</span><span class="c1">//进入起始状态state 1</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">state1</span><span class="o">(</span><span class="n">String</span> <span class="n">s1</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">index1</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="c1">//处理空格</span>
</span><span class='line'>      <span class="k">while</span><span class="o">(</span><span class="n">index1</span> <span class="o">&lt;</span> <span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">s1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index1</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">index1</span><span class="o">++;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//在state1结束 即全部为空格</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">index1</span> <span class="o">==</span> <span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//转到state 2</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index1</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span> <span class="o">||</span> <span class="n">s1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index1</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">state2</span><span class="o">(</span><span class="n">s1</span><span class="o">,</span><span class="n">index1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">//转到state 3</span>
</span><span class='line'>      <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index1</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">state3</span><span class="o">(</span><span class="n">s1</span><span class="o">,</span> <span class="n">index1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">//转到state 4</span>
</span><span class='line'>      <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index1</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">state4</span><span class="o">(</span><span class="n">s1</span><span class="o">,</span> <span class="n">index1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">//不合法字符</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">state2</span><span class="o">(</span><span class="n">String</span> <span class="n">s2</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">index2</span><span class="o">)</span><span class="c1">//+或-符号转到state2</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="c1">//在state2结束 不合法</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(++</span><span class="n">index2</span> <span class="o">==</span> <span class="n">s2</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//遇数字转到state 3</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">s2</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index2</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">state3</span><span class="o">(</span><span class="n">s2</span><span class="o">,</span> <span class="n">index2</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">//遇小数点转到state 4</span>
</span><span class='line'>      <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">s2</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index2</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">state4</span><span class="o">(</span><span class="n">s2</span> <span class="o">,</span> <span class="n">index2</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">//不合法字符</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">state3</span><span class="o">(</span><span class="n">String</span> <span class="n">s3</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">index3</span><span class="o">)</span><span class="c1">//数字转到state3</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="n">index3</span><span class="o">++;</span>
</span><span class='line'>      <span class="k">while</span><span class="o">(</span><span class="n">index3</span> <span class="o">&lt;</span> <span class="n">s3</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">s3</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index3</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">index3</span><span class="o">++;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//在state3结束合法</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">index3</span> <span class="o">==</span> <span class="n">s3</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//遇小数点转到state 5</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">s3</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index3</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">state5</span><span class="o">(</span><span class="n">s3</span><span class="o">,</span> <span class="n">index3</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">//遇科学计数法e转到state 6</span>
</span><span class='line'>      <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">s3</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index3</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;e&#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">state6</span><span class="o">(</span><span class="n">s3</span> <span class="o">,</span> <span class="n">index3</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">//遇空格转到state 9</span>
</span><span class='line'>      <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">s3</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index3</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">state9</span><span class="o">(</span><span class="n">s3</span> <span class="o">,</span> <span class="n">index3</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">//不合法字符</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">state4</span><span class="o">(</span><span class="n">String</span> <span class="n">s4</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">index4</span><span class="o">)</span><span class="c1">//&quot;.&quot;转到state4</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="c1">////在state4结束不合法</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(++</span><span class="n">index4</span> <span class="o">==</span> <span class="n">s4</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//遇数字转到state 5</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">s4</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index4</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">state5</span><span class="o">(</span><span class="n">s4</span> <span class="o">,</span> <span class="n">index4</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">//不合法字符</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">state5</span><span class="o">(</span><span class="n">String</span> <span class="n">s5</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">index5</span><span class="o">)</span><span class="c1">//数字转达state 5</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="n">index5</span><span class="o">++;</span>
</span><span class='line'>      <span class="k">while</span><span class="o">(</span><span class="n">index5</span> <span class="o">&lt;</span> <span class="n">s5</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">s5</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index5</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">index5</span><span class="o">++;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//在state5结束合法</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">index5</span> <span class="o">==</span> <span class="n">s5</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//遇科学计数法e转到state 6</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">s5</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index5</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;e&#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">state6</span><span class="o">(</span><span class="n">s5</span> <span class="o">,</span> <span class="n">index5</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">//遇空格转到state 9</span>
</span><span class='line'>      <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">s5</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index5</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">state9</span><span class="o">(</span><span class="n">s5</span> <span class="o">,</span> <span class="n">index5</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">//不合法字符</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">state6</span><span class="o">(</span><span class="n">String</span> <span class="n">s6</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">index6</span><span class="o">)</span><span class="c1">//遇科学计数法e转到state 6</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="c1">//在state6结束不合法</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(++</span><span class="n">index6</span> <span class="o">==</span> <span class="n">s6</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">s6</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index6</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span> <span class="o">||</span> <span class="n">s6</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index6</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">state7</span><span class="o">(</span><span class="n">s6</span> <span class="o">,</span> <span class="n">index6</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">s6</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index6</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">state8</span><span class="o">(</span><span class="n">s6</span> <span class="o">,</span> <span class="n">index6</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">state7</span><span class="o">(</span><span class="n">String</span> <span class="n">s7</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">index7</span><span class="o">)</span><span class="c1">//遇+/-转到state 7</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(++</span><span class="n">index7</span> <span class="o">==</span> <span class="n">s7</span><span class="o">.</span><span class="na">length</span><span class="o">())</span><span class="c1">//在state7结束 false</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">s7</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index7</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">state8</span><span class="o">(</span> <span class="n">s7</span> <span class="o">,</span> <span class="n">index7</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">state8</span><span class="o">(</span><span class="n">String</span> <span class="n">s8</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">index8</span><span class="o">)</span><span class="c1">//遇数字转到state 8</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="n">index8</span><span class="o">++;</span>
</span><span class='line'>      <span class="k">while</span><span class="o">(</span><span class="n">index8</span> <span class="o">&lt;</span> <span class="n">s8</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">s8</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index8</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">index8</span><span class="o">++;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">index8</span> <span class="o">==</span> <span class="n">s8</span><span class="o">.</span><span class="na">length</span><span class="o">())</span><span class="c1">//在state8结束 true;</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">s8</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index8</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">state9</span><span class="o">(</span><span class="n">s8</span> <span class="o">,</span> <span class="n">index8</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">state9</span><span class="o">(</span><span class="n">String</span> <span class="n">s9</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">index9</span><span class="o">)</span><span class="c1">//遇空格转到state 9</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="n">index9</span><span class="o">++;</span>
</span><span class='line'>      <span class="k">while</span><span class="o">(</span><span class="n">index9</span> <span class="o">&lt;</span> <span class="n">s9</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">s9</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index9</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">index9</span><span class="o">++;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">index9</span> <span class="o">==</span> <span class="n">s9</span><span class="o">.</span><span class="na">length</span><span class="o">())</span><span class="c1">//在state9结束 true;</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>解法二:使用二维数组表示<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//用有限自动机解题DFA</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValidNumber2</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">enum</span> <span class="n">Type</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>        <span class="n">INVALID</span><span class="o">,</span>    <span class="c1">// 0</span>
</span><span class='line'>        <span class="n">SPACE</span><span class="o">,</span>      <span class="c1">// 1</span>
</span><span class='line'>        <span class="n">SIGN</span><span class="o">,</span>       <span class="c1">// 2</span>
</span><span class='line'>        <span class="n">DIGIT</span><span class="o">,</span>      <span class="c1">// 3</span>
</span><span class='line'>        <span class="n">DOT</span><span class="o">,</span>        <span class="c1">// 4</span>
</span><span class='line'>        <span class="n">EXPONENT</span><span class="o">,</span>   <span class="c1">// 5</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isNumber</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span><span class="o">[][]</span> <span class="n">stateTable</span> <span class="o">=</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="c1">//INVALID SPACE SIGN DIGIT DOT EXPONMENT</span>
</span><span class='line'>             <span class="c1">//所在列   0    1      2    3    4     5</span>
</span><span class='line'>                  <span class="o">{-</span><span class="mi">1</span><span class="o">,</span>   <span class="mi">0</span><span class="o">,</span>     <span class="mi">1</span><span class="o">,</span>   <span class="mi">2</span><span class="o">,</span>   <span class="mi">3</span><span class="o">,</span>   <span class="o">-</span><span class="mi">1</span><span class="o">},</span> <span class="c1">//state 0</span>
</span><span class='line'>                  <span class="o">{-</span><span class="mi">1</span><span class="o">,</span>  <span class="o">-</span><span class="mi">1</span><span class="o">,</span>    <span class="o">-</span><span class="mi">1</span><span class="o">,</span>   <span class="mi">2</span><span class="o">,</span>   <span class="mi">3</span><span class="o">,</span>   <span class="o">-</span><span class="mi">1</span><span class="o">},</span> <span class="c1">//state 1</span>
</span><span class='line'>                  <span class="o">{-</span><span class="mi">1</span><span class="o">,</span>   <span class="mi">8</span><span class="o">,</span>    <span class="o">-</span><span class="mi">1</span><span class="o">,</span>   <span class="mi">2</span><span class="o">,</span>   <span class="mi">4</span><span class="o">,</span>    <span class="mi">5</span><span class="o">},</span> <span class="c1">//state 2</span>
</span><span class='line'>                  <span class="o">{-</span><span class="mi">1</span><span class="o">,</span>  <span class="o">-</span><span class="mi">1</span><span class="o">,</span>    <span class="o">-</span><span class="mi">1</span><span class="o">,</span>   <span class="mi">4</span><span class="o">,</span>  <span class="o">-</span><span class="mi">1</span><span class="o">,</span>   <span class="o">-</span><span class="mi">1</span><span class="o">},</span> <span class="c1">//state 3</span>
</span><span class='line'>                  <span class="o">{-</span><span class="mi">1</span><span class="o">,</span>   <span class="mi">8</span><span class="o">,</span>    <span class="o">-</span><span class="mi">1</span><span class="o">,</span>   <span class="mi">4</span><span class="o">,</span>  <span class="o">-</span><span class="mi">1</span><span class="o">,</span>    <span class="mi">5</span><span class="o">},</span> <span class="c1">//state 4</span>
</span><span class='line'>                  <span class="o">{-</span><span class="mi">1</span><span class="o">,</span>  <span class="o">-</span><span class="mi">1</span><span class="o">,</span>     <span class="mi">6</span><span class="o">,</span>   <span class="mi">7</span><span class="o">,</span>  <span class="o">-</span><span class="mi">1</span><span class="o">,</span>   <span class="o">-</span><span class="mi">1</span><span class="o">},</span> <span class="c1">//state 5</span>
</span><span class='line'>                  <span class="o">{-</span><span class="mi">1</span><span class="o">,</span>  <span class="o">-</span><span class="mi">1</span><span class="o">,</span>    <span class="o">-</span><span class="mi">1</span><span class="o">,</span>   <span class="mi">7</span><span class="o">,</span>  <span class="o">-</span><span class="mi">1</span><span class="o">,</span>   <span class="o">-</span><span class="mi">1</span><span class="o">},</span> <span class="c1">//state 6</span>
</span><span class='line'>                  <span class="o">{-</span><span class="mi">1</span><span class="o">,</span>   <span class="mi">8</span><span class="o">,</span>   <span class="o">-</span><span class="mi">1</span><span class="o">,</span>   <span class="mi">7</span><span class="o">,</span>  <span class="o">-</span><span class="mi">1</span><span class="o">,</span>   <span class="o">-</span><span class="mi">1</span><span class="o">},</span> <span class="c1">//state 7</span>
</span><span class='line'>                  <span class="o">{-</span><span class="mi">1</span><span class="o">,</span>   <span class="mi">8</span><span class="o">,</span>   <span class="o">-</span><span class="mi">1</span><span class="o">,</span>  <span class="o">-</span><span class="mi">1</span><span class="o">,</span>  <span class="o">-</span><span class="mi">1</span><span class="o">,</span>   <span class="o">-</span><span class="mi">1</span><span class="o">},</span> <span class="c1">//state 8</span>
</span><span class='line'>          <span class="o">};</span>
</span><span class='line'>          
</span><span class='line'>          <span class="kt">int</span> <span class="n">state</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span><span class="c1">//其实状态state0</span>
</span><span class='line'>          
</span><span class='line'>          
</span><span class='line'>          <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="n">Type</span> <span class="n">type</span> <span class="o">=</span> <span class="n">Type</span><span class="o">.</span><span class="na">INVALID</span><span class="o">;</span>
</span><span class='line'>              <span class="kt">char</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>              
</span><span class='line'>              <span class="k">if</span><span class="o">(</span><span class="n">tmp</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">type</span> <span class="o">=</span> <span class="n">Type</span><span class="o">.</span><span class="na">SPACE</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">tmp</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span> <span class="o">||</span> <span class="n">tmp</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">type</span> <span class="o">=</span> <span class="n">Type</span><span class="o">.</span><span class="na">SIGN</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">tmp</span><span class="o">))</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">type</span> <span class="o">=</span> <span class="n">Type</span><span class="o">.</span><span class="na">DIGIT</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">tmp</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">type</span> <span class="o">=</span> <span class="n">Type</span><span class="o">.</span><span class="na">DOT</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">tmp</span> <span class="o">==</span> <span class="sc">&#39;e&#39;</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">type</span> <span class="o">=</span> <span class="n">Type</span><span class="o">.</span><span class="na">EXPONENT</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">else</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">type</span> <span class="o">=</span> <span class="n">Type</span><span class="o">.</span><span class="na">INVALID</span><span class="o">;</span><span class="c1">//不合法字符</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              
</span><span class='line'>              <span class="c1">//ordinal()返回此枚举常量的序数</span>
</span><span class='line'>              <span class="n">state</span> <span class="o">=</span> <span class="n">stateTable</span><span class="o">[</span><span class="n">state</span><span class="o">][</span><span class="n">type</span><span class="o">.</span><span class="na">ordinal</span><span class="o">()];</span><span class="c1">//转移到下一个状态</span>
</span><span class='line'>              
</span><span class='line'>              <span class="k">if</span><span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">state</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">state</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">||</span> <span class="n">state</span> <span class="o">==</span> <span class="mi">7</span> <span class="o">||</span> <span class="n">state</span> <span class="o">==</span> <span class="mi">8</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试数据:<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testIsNumber</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">&quot;0&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">expt1</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="s">&quot;Wrong1&quot;</span><span class="o">,</span> <span class="n">expt1</span><span class="o">,</span> <span class="n">vn</span><span class="o">.</span><span class="na">isNumber</span><span class="o">(</span><span class="n">s1</span><span class="o">));</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">&quot; 0.1 &quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">expt2</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="s">&quot;Wrong2&quot;</span><span class="o">,</span> <span class="n">expt2</span><span class="o">,</span> <span class="n">vn</span><span class="o">.</span><span class="na">isNumber</span><span class="o">(</span><span class="n">s2</span><span class="o">));</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="s">&quot;abc&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">expt3</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="s">&quot;Wrong3&quot;</span><span class="o">,</span> <span class="n">expt3</span><span class="o">,</span> <span class="n">vn</span><span class="o">.</span><span class="na">isNumber</span><span class="o">(</span><span class="n">s3</span><span class="o">));</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">String</span> <span class="n">s4</span> <span class="o">=</span> <span class="s">&quot;1 a&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">expt4</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="s">&quot;Wrong4&quot;</span><span class="o">,</span> <span class="n">expt4</span><span class="o">,</span> <span class="n">vn</span><span class="o">.</span><span class="na">isNumber</span><span class="o">(</span><span class="n">s4</span><span class="o">));</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">String</span> <span class="n">s5</span> <span class="o">=</span> <span class="s">&quot;2e10&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">expt5</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="s">&quot;Wrong5&quot;</span><span class="o">,</span> <span class="n">expt5</span><span class="o">,</span> <span class="n">vn</span><span class="o">.</span><span class="na">isNumber</span><span class="o">(</span><span class="n">s5</span><span class="o">));</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">String</span> <span class="n">s6</span> <span class="o">=</span> <span class="s">&quot;.3&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">expt6</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="s">&quot;Wrong6&quot;</span><span class="o">,</span> <span class="n">expt6</span><span class="o">,</span> <span class="n">vn</span><span class="o">.</span><span class="na">isNumber</span><span class="o">(</span><span class="n">s6</span><span class="o">));</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">String</span> <span class="n">s7</span> <span class="o">=</span> <span class="s">&quot;3.&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">expt7</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="s">&quot;Wrong7&quot;</span><span class="o">,</span> <span class="n">expt7</span><span class="o">,</span> <span class="n">vn</span><span class="o">.</span><span class="na">isNumber</span><span class="o">(</span><span class="n">s7</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lintcode130 堆排序]]></title>
    <link href="http://www.regenthypo.com/blog/2016/04/23/lintcode130-heapsort/"/>
    <updated>2016-04-23T16:00:59+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/04/23/lintcode130-heapsort</id>
    <content type="html"><![CDATA[<p>题目是给出一个整数数组，堆化操作就是把它变成一个最小堆数组;<br></p>

<p>改为堆排序<br>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">hypo</span><span class="o">.</span><span class="na">Sort</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 堆排序</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Heap_130</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="c1">//建最小堆</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">build_min_heap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">A</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">heapsize</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">heapsize</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">i</span><span class="o">--)</span><span class="c1">//数组下标规定从1开始  </span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">min_heapify</span><span class="o">(</span><span class="n">A</span> <span class="o">,</span> <span class="n">i</span> <span class="o">,</span><span class="n">heapsize</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//保持最小堆性质</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">min_heapify</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">A</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">index</span>  <span class="o">,</span> <span class="kt">int</span> <span class="n">heapsize</span><span class="o">)</span><span class="c1">//数组下标规定从1开始</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">index</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="o">(</span><span class="n">index</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kt">int</span> <span class="n">minindex</span> <span class="o">=</span> <span class="n">index</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">heapsize</span> <span class="o">&amp;&amp;</span> <span class="n">A</span><span class="o">[</span><span class="n">left</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">A</span><span class="o">[</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="o">])</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">minindex</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">right</span> <span class="o">&lt;=</span> <span class="n">heapsize</span> <span class="o">&amp;&amp;</span> <span class="n">A</span><span class="o">[</span><span class="n">right</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">A</span><span class="o">[</span><span class="n">minindex</span><span class="o">-</span><span class="mi">1</span><span class="o">])</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">minindex</span> <span class="o">=</span> <span class="n">right</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">minindex</span> <span class="o">!=</span> <span class="n">index</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">A</span><span class="o">[</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>          <span class="n">A</span><span class="o">[</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">A</span><span class="o">[</span><span class="n">minindex</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>          <span class="n">A</span><span class="o">[</span><span class="n">minindex</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span><span class='line'>          <span class="n">min_heapify</span><span class="o">(</span><span class="n">A</span> <span class="o">,</span> <span class="n">minindex</span> <span class="o">,</span> <span class="n">heapsize</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//堆排序.(最小堆是从大到小) 如果要从小到大可先建最大堆.</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">heapsort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">A</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="n">build_min_heap</span><span class="o">(</span><span class="n">A</span><span class="o">);</span><span class="c1">//先建最小堆</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kt">int</span> <span class="n">heapsize</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//一趟排好一个元素,排好的元素从最小堆中去除.</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">heapsize</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> 
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="c1">//交换A[1]与A[i] 该表示是数组下标从1开始</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>          <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">A</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">A</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">heapsize</span><span class="o">--;</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//注意这个地方堆已经变小,下一步堆调整不包括已经排好序的元素.</span>
</span><span class='line'>          <span class="n">min_heapify</span><span class="o">(</span><span class="n">A</span> <span class="o">,</span> <span class="mi">1</span> <span class="o">,</span> <span class="n">heapsize</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span><span class="o">[]</span> <span class="n">A</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">};</span>
</span><span class='line'>      <span class="n">Heap_130</span><span class="o">.</span><span class="na">heapsort</span><span class="o">(</span><span class="n">A</span><span class="o">);</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">:</span> <span class="n">A</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">n</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lintcode124 最长连续序列]]></title>
    <link href="http://www.regenthypo.com/blog/2016/04/23/lintcode124-longest-consecutive-sequence/"/>
    <updated>2016-04-23T14:22:48+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/04/23/lintcode124-longest-consecutive-sequence</id>
    <content type="html"><![CDATA[<p>给定一个未排序的整数数组，找出最长连续序列的长度。<br></p>

<p>说明<br>
要求你的算法复杂度为O(n)</p>

<p>样例<br>
给出数组[100, 4, 200, 1, 3, 2]，这个最长的连续序列是 [1, 2, 3, 4]，返回所求长度 4</p>

<p>解题思路里还是有并查集的思想在里面.<br>
1.如果HashMap含有该键,说明某个连续序列中已经包含该键，不用处理;<br>
2.如果HashMap不含该键,分四种情况处理:<br>
        //四种情况  并union<br>
        //A.与左右相连的连续序列合并成一个序列, 如   左:234  右:678  插5   max=3+3+1<br>
        //B.与左边相连的连续序列合并成一个序列, 如   左:234  右:     插5   max=3+1<br>
        //C.与右边相连的连续序列合并成一个序列, 如   左：    右:678  插5   max=3+1<br>
        //D.新建一个连续序列,如                      左:     右:     插5   max=1<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">longestConsecutive</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">num</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//&lt;键值,连续序列长度&gt;</span>
</span><span class='line'>      <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">:</span> <span class="n">num</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(!</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">n</span><span class="o">))</span><span class="c1">//查 find</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="c1">//由连续序列的最左边和最右边记录当前连续序列的长度.</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">?</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span> <span class="o">?</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>              
</span><span class='line'>              <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>              
</span><span class='line'>              <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">max</span><span class="o">);</span>
</span><span class='line'>              
</span><span class='line'>              <span class="n">result</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="n">max</span><span class="o">);</span>
</span><span class='line'>              
</span><span class='line'>              <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">left</span><span class="o">,</span> <span class="n">max</span><span class="o">);</span>
</span><span class='line'>              <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">n</span> <span class="o">+</span> <span class="n">right</span> <span class="o">,</span> <span class="n">max</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式之装饰器模式]]></title>
    <link href="http://www.regenthypo.com/blog/2016/04/22/decorator/"/>
    <updated>2016-04-22T19:10:35+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/04/22/decorator</id>
    <content type="html"><![CDATA[<h2>1.意图<br></h2>

<p>动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更为灵活.<br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java IO总结]]></title>
    <link href="http://www.regenthypo.com/blog/2016/04/22/java-io/"/>
    <updated>2016-04-22T19:07:39+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/04/22/java-io</id>
    <content type="html"><![CDATA[<p><img src="http://www.regenthypo.com/images/IO1.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java方法区]]></title>
    <link href="http://www.regenthypo.com/blog/2016/04/18/java-method-area/"/>
    <updated>2016-04-18T15:17:37+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/04/18/java-method-area</id>
    <content type="html"><![CDATA[<p>Java运行时数据区<br>
<img src="http://www.regenthypo.com/images/jma1.jpg"></p>

<p><font color=#FF0000>Java方法区和堆一样是被该程序的所有线程共享的.</font><br></p>

<p><img src="http://www.regenthypo.com/images/jma2.jpg"></p>

<p><img src="http://www.regenthypo.com/images/jma3.jpg"></p>

<p><img src="http://www.regenthypo.com/images/jma4.jpg"></p>

<p><img src="http://www.regenthypo.com/images/jma5.jpg"></p>

<p><img src="http://www.regenthypo.com/images/jma6.jpg"></p>

<p><img src="http://www.regenthypo.com/images/jma7.jpg"></p>

<p><img src="http://www.regenthypo.com/images/jma8.jpg"></p>

<p><img src="http://www.regenthypo.com/images/jma9.jpg"></p>

<p><img src="http://www.regenthypo.com/images/jma10.jpg"></p>

<p><img src="http://www.regenthypo.com/images/jma11.jpg"></p>

<p><img src="http://www.regenthypo.com/images/jma12.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ConcurrentHashMap源码解析]]></title>
    <link href="http://www.regenthypo.com/blog/2016/04/17/concurrenthashmap-analyse/"/>
    <updated>2016-04-17T21:48:40+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/04/17/concurrenthashmap-analyse</id>
    <content type="html"><![CDATA[<p>ConcurrentHashMap类编译时常量<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="cm">/* ---------------- Constants -------------- */</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The default initial capacity for this table,</span>
</span><span class='line'><span class="cm">     * used when not otherwise specified in a constructor.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DEFAULT_INITIAL_CAPACITY</span> <span class="o">=</span> <span class="mi">16</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The default load factor for this table, used when not</span>
</span><span class='line'><span class="cm">     * otherwise specified in a constructor.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">DEFAULT_LOAD_FACTOR</span> <span class="o">=</span> <span class="mf">0.75f</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The default concurrency level for this table, used when not</span>
</span><span class='line'><span class="cm">     * otherwise specified in a constructor.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DEFAULT_CONCURRENCY_LEVEL</span> <span class="o">=</span> <span class="mi">16</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The maximum capacity, used if a higher value is implicitly</span>
</span><span class='line'><span class="cm">     * specified by either of the constructors with arguments.  MUST</span>
</span><span class='line'><span class="cm">     * be a power of two &lt;= 1&lt;&lt;30 to ensure that entries are indexable</span>
</span><span class='line'><span class="cm">     * using ints.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MAXIMUM_CAPACITY</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">30</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The minimum capacity for per-segment tables.  Must be a power</span>
</span><span class='line'><span class="cm">     * of two, at least two to avoid immediate resizing on next use</span>
</span><span class='line'><span class="cm">     * after lazy construction.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MIN_SEGMENT_TABLE_CAPACITY</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The maximum number of segments to allow; used to bound</span>
</span><span class='line'><span class="cm">     * constructor arguments. Must be power of two less than 1 &lt;&lt; 24.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MAX_SEGMENTS</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="o">;</span> <span class="c1">// slightly conservative</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Number of unsynchronized retries in size and containsValue</span>
</span><span class='line'><span class="cm">     * methods before resorting to locking. This is used to avoid</span>
</span><span class='line'><span class="cm">     * unbounded retries if tables undergo continuous modification</span>
</span><span class='line'><span class="cm">     * which would make it impossible to obtain an accurate result.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">RETRIES_BEFORE_LOCK</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ConcurrentHashMap类成员变量<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="cm">/* ---------------- Fields -------------- */</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Mask value for indexing into segments. The upper bits of a</span>
</span><span class='line'><span class="cm">     * key&#39;s hash code are used to choose the segment.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">segmentMask</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Shift value for indexing within segments.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">segmentShift</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The segments, each of which is a specialized hash table.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Segment</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;[]</span> <span class="n">segments</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">transient</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;</span> <span class="n">keySet</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">transient</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;&gt;</span> <span class="n">entrySet</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">transient</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">values</span><span class="o">;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CopyOnWriteArrayList类源码解析]]></title>
    <link href="http://www.regenthypo.com/blog/2016/04/17/copyonwritearraylist-analyse/"/>
    <updated>2016-04-17T15:58:24+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/04/17/copyonwritearraylist-analyse</id>
    <content type="html"><![CDATA[<p>public class CopyOnWriteArrayList<E> extends Object implements List<E>, RandomAccess, Cloneable, SerializableArrayList  <br>的一个线程安全的变体，其中所有可变操作（add、set 等等）都是通过对底层数组进行一次新的复制来实现的。</p>

<p>这一般需要很大的开销，但是当遍历操作的数量大大超过可变操作的数量时，这种方法可能比其他替代方法更 有效。在不能或不想进行同步遍历，但又需要从并发线程中排除冲突时，它也很有用。“快照”风格的迭代器方法在创建迭代器时使用了对数组状态的引用。此数组在迭代器的生存期内不会更改，因此不可能发生冲突，并且迭代器保证不会抛出 ConcurrentModificationException。创建迭代器以后，迭代器就不会反映列表的添加、移除或者更改。在迭代器上进行的元素更改操作（remove、set 和 add）不受支持。这些方法将抛出 UnsupportedOperationException。</p>

<p>允许使用所有元素，包括 null。</p>

<p>内存一致性效果：当存在其他并发 collection 时，将对象放入 CopyOnWriteArrayList 之前的线程中的操作 happen-before 随后通过另一线程从 CopyOnWriteArrayList 中访问或移除该元素的操作。</p>

<p>Copy-On-Write简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。</p>

<p>CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。</p>

<p>使用场景：读取频繁，写较少。 理由：底层的安全性 本质上是依赖于线程读取的数据副本来实现的。因此每次写都是要复制底层数组数据的，如果写频繁势必会造成大量的性能消耗。</p>

<p><font color=#FF0000>CopyOnWriteArrayList要修改时，都是将旧数组先复制到新数组中，再在新数组上修改，修改完了，再将旧数组的引用指向新数组.
不管是set方法，还是add方法,remove方法都是这样的.</font><br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">8673264195747942595L</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** The lock protecting all mutators */</span>
</span><span class='line'>    <span class="kd">transient</span> <span class="kd">final</span> <span class="n">ReentrantLock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ReentrantLock</span><span class="o">();</span><span class="c1">//显示锁</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** The array, accessed only via getArray/setArray. */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">volatile</span> <span class="kd">transient</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Gets the array.  Non-private so as to also be accessible</span>
</span><span class='line'><span class="cm">     * from CopyOnWriteArraySet class.</span>
</span><span class='line'><span class="cm">     * getArray()返回的引用是事实上不可变的，如果没有这个保证，那么这个操作不可能是线程安全</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Object</span><span class="o">[]</span> <span class="nf">getArray</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">array</span><span class="o">;</span><span class="c1">//返回当前数组的引用</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">void</span> <span class="nf">setArray</span><span class="o">(</span><span class="n">Object</span><span class="o">[]</span> <span class="n">a</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">array</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span><span class="c1">//将旧数组引用指向新数组</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 如果新建CopyOnWriteArrayList对象时没有指定大小，默认是空的</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">CopyOnWriteArrayList</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">setArray</span><span class="o">(</span><span class="k">new</span> <span class="n">Object</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Creates a list containing the elements of the specified</span>
</span><span class='line'><span class="cm">     * collection, in the order they are returned by the collection&#39;s</span>
</span><span class='line'><span class="cm">     * iterator.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param c the collection of initially held elements</span>
</span><span class='line'><span class="cm">     * @throws NullPointerException if the specified collection is null</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">CopyOnWriteArrayList</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">E</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Object</span><span class="o">[]</span> <span class="n">elements</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">toArray</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">elements</span><span class="o">.</span><span class="na">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">Object</span><span class="o">[].</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>            <span class="n">elements</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">Object</span><span class="o">[].</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setArray</span><span class="o">(</span><span class="n">elements</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Creates a list holding a copy of the given array.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param toCopyIn the array (a copy of this array is used as the</span>
</span><span class='line'><span class="cm">     *        internal array)</span>
</span><span class='line'><span class="cm">     * @throws NullPointerException if the specified array is null</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">CopyOnWriteArrayList</span><span class="o">(</span><span class="n">E</span><span class="o">[]</span> <span class="n">toCopyIn</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">setArray</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">toCopyIn</span><span class="o">,</span> <span class="n">toCopyIn</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">Object</span><span class="o">[].</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">getArray</span><span class="o">().</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>set方法<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">E</span> <span class="nf">set</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="n">E</span> <span class="n">element</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">ReentrantLock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">lock</span><span class="o">;</span><span class="c1">//使用显示锁同步</span>
</span><span class='line'>    <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">Object</span><span class="o">[]</span> <span class="n">elements</span> <span class="o">=</span> <span class="n">getArray</span><span class="o">();</span><span class="c1">//当前CopyOnWriteArrayList引用</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">E</span> <span class="n">oldValue</span> <span class="o">=</span> <span class="n">get</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span><span class="c1">//得到当前index位置上的元素引用</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">oldValue</span> <span class="o">!=</span> <span class="n">element</span><span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//复制当前数组到一个新数组</span>
</span><span class='line'>            <span class="n">Object</span><span class="o">[]</span> <span class="n">newElements</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="n">len</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//修改新数组，老数组并没有改变</span>
</span><span class='line'>            <span class="n">newElements</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">element</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//将旧数组引用指向新数组</span>
</span><span class='line'>            <span class="n">setArray</span><span class="o">(</span><span class="n">newElements</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Not quite a no-op; ensures volatile write semantics</span>
</span><span class='line'>            <span class="n">setArray</span><span class="o">(</span><span class="n">elements</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">oldValue</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">finally</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span><span class="c1">//显示锁要手动释放.</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>add方法<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">ReentrantLock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">lock</span><span class="o">;</span>
</span><span class='line'>    <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Object</span><span class="o">[]</span> <span class="n">elements</span> <span class="o">=</span> <span class="n">getArray</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Object</span><span class="o">[]</span> <span class="n">newElements</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="n">len</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">newElements</span><span class="o">[</span><span class="n">len</span><span class="o">]</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//将旧数组引用指向新数组</span>
</span><span class='line'>        <span class="n">setArray</span><span class="o">(</span><span class="n">newElements</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">finally</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>remove方法<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">E</span> <span class="nf">remove</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">ReentrantLock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">lock</span><span class="o">;</span>
</span><span class='line'>    <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Object</span><span class="o">[]</span> <span class="n">elements</span> <span class="o">=</span> <span class="n">getArray</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>        <span class="n">E</span> <span class="n">oldValue</span> <span class="o">=</span> <span class="n">get</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">numMoved</span> <span class="o">=</span> <span class="n">len</span> <span class="o">-</span> <span class="n">index</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">numMoved</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>            <span class="n">setArray</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>        <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Object</span><span class="o">[]</span> <span class="n">newElements</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[</span><span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">newElements</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">newElements</span><span class="o">,</span> <span class="n">index</span><span class="o">,</span>
</span><span class='line'>                             <span class="n">numMoved</span><span class="o">);</span>
</span><span class='line'>            <span class="n">setArray</span><span class="o">(</span><span class="n">newElements</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">oldValue</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>读的时候不需要加锁，如果读的时候有多个线程正在向CopyOnWriteArrayList添加数据，读还是会读到旧的数据，因为写的时候不会锁住旧的CopyOnWriteArrayList.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">E</span> <span class="nf">get</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="c1">//如果读的时候正好有线程在改变数组也没关系，在数组没有修改完的情况下，getArray()返回的是旧</span>
</span><span class='line'>  <span class="c1">//数组的引用.所有本次读到的还是旧数组的值.</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">get</span><span class="o">(</span><span class="n">getArray</span><span class="o">(),</span> <span class="n">index</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>CopyOnWriteArrayList的迭代器<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="kd">public</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">iterator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">COWIterator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;(</span><span class="n">getArray</span><span class="o">(),</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * {@inheritDoc}</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;The returned iterator provides a snapshot of the state of the list</span>
</span><span class='line'><span class="cm">     * when the iterator was constructed. No synchronization is needed while</span>
</span><span class='line'><span class="cm">     * traversing the iterator. The iterator does &lt;em&gt;NOT&lt;/em&gt; support the</span>
</span><span class='line'><span class="cm">     * &lt;tt&gt;remove&lt;/tt&gt;, &lt;tt&gt;set&lt;/tt&gt; or &lt;tt&gt;add&lt;/tt&gt; methods.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ListIterator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">listIterator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">COWIterator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;(</span><span class="n">getArray</span><span class="o">(),</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * {@inheritDoc}</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;The returned iterator provides a snapshot of the state of the list</span>
</span><span class='line'><span class="cm">     * when the iterator was constructed. No synchronization is needed while</span>
</span><span class='line'><span class="cm">     * traversing the iterator. The iterator does &lt;em&gt;NOT&lt;/em&gt; support the</span>
</span><span class='line'><span class="cm">     * &lt;tt&gt;remove&lt;/tt&gt;, &lt;tt&gt;set&lt;/tt&gt; or &lt;tt&gt;add&lt;/tt&gt; methods.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @throws IndexOutOfBoundsException {@inheritDoc}</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ListIterator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">listIterator</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Object</span><span class="o">[]</span> <span class="n">elements</span> <span class="o">=</span> <span class="n">getArray</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">index</span><span class="o">&lt;</span><span class="mi">0</span> <span class="o">||</span> <span class="n">index</span><span class="o">&gt;</span><span class="n">len</span><span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IndexOutOfBoundsException</span><span class="o">(</span><span class="s">&quot;Index: &quot;</span><span class="o">+</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">COWIterator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;(</span><span class="n">elements</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">COWIterator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">ListIterator</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/** Snapshot of the array */</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">final</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">snapshot</span><span class="o">;</span>
</span><span class='line'>        <span class="cm">/** Index of element to be returned by subsequent call to next.  */</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">int</span> <span class="n">cursor</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="nf">COWIterator</span><span class="o">(</span><span class="n">Object</span><span class="o">[]</span> <span class="n">elements</span><span class="o">,</span> <span class="kt">int</span> <span class="n">initialCursor</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">cursor</span> <span class="o">=</span> <span class="n">initialCursor</span><span class="o">;</span>
</span><span class='line'>            <span class="n">snapshot</span> <span class="o">=</span> <span class="n">elements</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">cursor</span> <span class="o">&lt;</span> <span class="n">snapshot</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasPrevious</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">cursor</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">E</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span> <span class="n">hasNext</span><span class="o">())</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">E</span><span class="o">)</span> <span class="n">snapshot</span><span class="o">[</span><span class="n">cursor</span><span class="o">++];</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">E</span> <span class="nf">previous</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span> <span class="n">hasPrevious</span><span class="o">())</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">E</span><span class="o">)</span> <span class="n">snapshot</span><span class="o">[--</span><span class="n">cursor</span><span class="o">];</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">nextIndex</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">cursor</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">previousIndex</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">cursor</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Not supported. Always throws UnsupportedOperationException.</span>
</span><span class='line'><span class="cm">         * @throws UnsupportedOperationException always; &lt;tt&gt;remove&lt;/tt&gt;</span>
</span><span class='line'><span class="cm">         *         is not supported by this iterator.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Not supported. Always throws UnsupportedOperationException.</span>
</span><span class='line'><span class="cm">         * @throws UnsupportedOperationException always; &lt;tt&gt;set&lt;/tt&gt;</span>
</span><span class='line'><span class="cm">         *         is not supported by this iterator.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Not supported. Always throws UnsupportedOperationException.</span>
</span><span class='line'><span class="cm">         * @throws UnsupportedOperationException always; &lt;tt&gt;add&lt;/tt&gt;</span>
</span><span class='line'><span class="cm">         *         is not supported by this iterator.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>CopyOnWrite容器有很多优点，但是同时也存在两个问题，即内存占用问题和数据一致性问题。所以在开发的时候需要注意一下。</p>

<p>　　内存占用问题。因为CopyOnWrite的写时复制机制，所以在进行写操作的时候，内存里会同时驻扎两个对象的内存，旧的对象和新写入的对象（注意:在复制的时候只是复制容器里的引用，只是在写的时候会创建新对象添加到新容器里，而旧容器的对象还在使用，所以有两份对象内存）。如果这些对象占用的内存比较大，比如说200M左右，那么再写入100M数据进去，内存就会占用300M，那么这个时候很有可能造成频繁的Yong GC和Full GC。之前我们系统中使用了一个服务由于每晚使用CopyOnWrite机制更新大对象，造成了每晚15秒的Full GC，应用响应时间也随之变长。</p>

<p>　　针对内存占用问题，可以通过压缩容器中的元素的方法来减少大对象的内存消耗，比如，如果元素全是10进制的数字，可以考虑把它压缩成36进制或64进制。或者不使用CopyOnWrite容器，而使用其他的并发容器，如ConcurrentHashMap。</p>

<p>　　数据一致性问题。CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。所以如果你希望写入的的数据，马上能读到，请不要使用CopyOnWrite容器。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java运行时数据区]]></title>
    <link href="http://www.regenthypo.com/blog/2016/04/12/java-runtime-data-memory/"/>
    <updated>2016-04-12T21:00:34+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/04/12/java-runtime-data-memory</id>
    <content type="html"><![CDATA[<p><img src="http://www.regenthypo.com/images/jrd_1.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java异常]]></title>
    <link href="http://www.regenthypo.com/blog/2016/04/12/java-exception/"/>
    <updated>2016-04-12T19:49:37+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/04/12/java-exception</id>
    <content type="html"><![CDATA[<p><img src="http://www.regenthypo.com/images/je1.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java类型生命周期]]></title>
    <link href="http://www.regenthypo.com/blog/2016/04/12/java-class-lifecycle/"/>
    <updated>2016-04-12T16:26:50+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/04/12/java-class-lifecycle</id>
    <content type="html"><![CDATA[<p>Java虚拟机通过装载、连接和初始化一个Java类型，使该类型可以被正在运行的Java程序所使用。其中，
装载就是把二进制形式的Java类型读入Java虚拟机中；<br>
连接就是把这种已经读入虚拟机的二进制形式的类型数据合并到虚拟机的运行时状态中;<br></p>

<p>连接阶段分为三个子步骤——验证、准备和解析<br>
验证步骤确保了Java类型数据格式正确并且适于Java虚拟机使用;<br>
准备步骤则负责为该类型分配它所需的内存，比如为它的类变量分配内存;<br>
解析步骤则负责把常量池中的符号引用转换为直接引用;<br></p>

<p>初始化阶段，都将为类变量赋以适当的初始值.<br></p>

<p><img src="http://www.regenthypo.com/images/jcc1.jpg"></p>

<h2>java类的初始化 <br></h2>

<p>Java虚拟机规范严格定义了类的初始化时机<br>
所有的Java虚拟机实现必须在每个类或接口首次主动使用时初始化，以下六种情形符合主动使用的要求:<br>
<img src="http://www.regenthypo.com/images/jcc2.jpg"></p>

<h2>Java类的装载 <br></h2>

<p><img src="http://www.regenthypo.com/images/jcc3.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java内存泄露]]></title>
    <link href="http://www.regenthypo.com/blog/2016/03/30/java-memory-leak/"/>
    <updated>2016-03-30T18:37:49+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/03/30/java-memory-leak</id>
    <content type="html"><![CDATA[<p>Java语言中虽然有垃圾收集机制，但仍然可能存在内存泄露的情况.<br></p>

<h2>什么是内存泄露<br></h2>

<p>内存泄露的定义:对象已经没有被应用程序使用，但是垃圾回收器没办法移除它们，因为它们还在被引用着.<br>
要先理解一下无用对象和未被引用对象.</p>

<p><img src="http://www.regenthypo.com/images/jml_1.jpg"></p>

<p>上图中未被引用对象会被垃圾回收器回收，而被引用对象却不会.未被引用的对象当然是不再被使用的对象，因为没有对象再引用它;
而无用对象却不全是未被引用对象,其中还有被引用的.这种情况将导致内存泄露.<br></p>

<h2>为什么会发生内存泄露<br></h2>

<p>来先看看下面的例子，为什么会发生内存泄漏。下面这个例子中，A对象引用B对象，A对象的生命周期（t1-t4）比B对象的生命周期（t2-t3）长的多。当B对象没有被应用程序使用之后，A对象仍然在引用着B对象。这样，垃圾回收器就没办法将B对象从内存中移除，从而导致内存问题，因为如果A引用更多这样的对象，那将有更多的未被引用对象存在，并消耗内存空间。<br></p>

<p>B对象也可能会持有许多其他的对象，那这些对象同样也不会被垃圾回收器回收。所有这些没在使用的对象将持续的消耗之前分配的内存空间。<br></p>

<p><img src="http://www.regenthypo.com/images/jml_2.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode43 Multiply Strings[String]]]></title>
    <link href="http://www.regenthypo.com/blog/2016/03/25/leetcode43-multiply-strings-string/"/>
    <updated>2016-03-25T22:26:25+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/03/25/leetcode43-multiply-strings-string</id>
    <content type="html"><![CDATA[<p>这其实是一道大数相乘的题目<br>
这个要注意一个小技巧:即nums[i]*nums[j]产生的积在[i+j,i+j+1]位上，如下图<br>
<img src="http://www.regenthypo.com/images/jc43.jpg"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">tencent</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BigNumberMultiply</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">mulitply</span><span class="o">(</span><span class="n">String</span> <span class="n">num1</span> <span class="o">,</span> <span class="n">String</span> <span class="n">num2</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">num1</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">num2</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kt">int</span> <span class="n">p</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">m</span><span class="o">+</span><span class="n">n</span><span class="o">];</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">StringBuffer</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuffer</span><span class="o">(</span><span class="n">m</span><span class="o">+</span><span class="n">n</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span><span class="o">--)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">j</span><span class="o">--)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">index1</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="o">;</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">index2</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>              
</span><span class='line'>              <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="o">(</span><span class="n">num1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="o">)</span> <span class="o">*</span> <span class="o">(</span><span class="n">num2</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="o">);</span>
</span><span class='line'>              
</span><span class='line'>              <span class="n">sum</span> <span class="o">+=</span> <span class="n">p</span><span class="o">[</span><span class="n">index2</span><span class="o">];</span>
</span><span class='line'>              
</span><span class='line'>              <span class="n">p</span><span class="o">[</span><span class="n">index1</span><span class="o">]</span> <span class="o">+=</span> <span class="n">sum</span> <span class="o">/</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'>              <span class="n">p</span><span class="o">[</span><span class="n">index2</span><span class="o">]</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">%</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">:</span> <span class="n">p</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="c1">//得到的数组p可能是从0开始的，这个0要去掉</span>
</span><span class='line'>          <span class="c1">//注意StringBuffer的length()方法是返回StringBuffer中已有字符的个数.</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(!(</span><span class="n">result</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">))</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="n">result</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="c1">// TODO Auto-generated method stub</span>
</span><span class='line'>      <span class="n">Scanner</span> <span class="n">scan</span>  <span class="o">=</span> <span class="k">new</span> <span class="nf">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">num1</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">num2</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">BigNumberMultiply</span><span class="o">.</span><span class="na">mulitply</span><span class="o">(</span><span class="n">num1</span><span class="o">,</span> <span class="n">num2</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.regenthypo.com/images/jc43_2.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Puzzlers读书笔记]]></title>
    <link href="http://www.regenthypo.com/blog/2016/03/24/java-puzzlers/"/>
    <updated>2016-03-24T21:11:35+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/03/24/java-puzzlers</id>
    <content type="html"><![CDATA[<h2>解惑3：长整形相除<br></h2>

<p><img src="http://www.regenthypo.com/images/jp3.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java单例模式深入解析]]></title>
    <link href="http://www.regenthypo.com/blog/2016/03/24/java-singleton/"/>
    <updated>2016-03-24T14:23:33+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/03/24/java-singleton</id>
    <content type="html"><![CDATA[<p>作为对象的创建模式，单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。这个类称为单例类.</p>

<p>单例模式有以下特点:<br>
1. 单例类只能有一个实例<br>
2. 单例类必须自己创建自己的唯一的实例<br>
3. 单例类必须给所有其他对象提供这一个实例.<br></p>

<h3>最简单的单例类</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">DP1_4</span><span class="o">.</span><span class="na">Singleton</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EagerSingleton</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">EagerSingleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">EagerSingleton</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//私有构造函数</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">EagerSingleton</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//静态工厂方法</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">EagerSingleton</span> <span class="nf">getInstance</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个类被加载时，静态变量instance会被初始化，此时类的私有构造函数会被调用。此时，单例类的唯一实例就别创建出来了.<br>
Java语言中单例类的一个重要特点是类的构造函数是私有的，从而避免外界利用构造函数直接创建出任意多的实例。<br>
值得注意的是，由于构造函数是私有的，因此该类不能被继承.<br>
<font color=#FF0000>注意类的静态变量当且仅当类初次加载时会被初始化，所以EagerSingleton类中的instance静态变量只会在类加载时初始化一次，
即只会产生一个对象,而且这个对象一定会产生出来.</font><br></p>

<h3>lazy loaded单例类</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">DP1_4</span><span class="o">.</span><span class="na">Singleton</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LazySingleton</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">LazySingleton</span> <span class="n">instance</span><span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//私有构造方法</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">LazySingleton</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//静态工厂方法</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">LazySingleton</span> <span class="nf">getInstance</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">LazySingleton</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码的变化有两处——首先，把instance初始化为null，直到第一次使用的时候通过判断是否为null来创建对象。因为创建过程不在声明处，所以那个final的修饰必须去掉。<br>
要使用LazySingleton，调用getInstance()方法。第一次的时候发现instance是null，然后就新建一个对象，返回出去；第二次再使用的时候，因为这个instance是static的，所以已经不是null了，因此不会再创建对象，直接将其返回。<br>
这个过程就成为lazy loaded，也就是迟加载——直到使用的时候才进行加载.<br></p>

<h3>同步的单例类</h3>

<p>线程A希望使用LazySingleton，调用getInstance()方法。因为是第一次调用，A就发现instance是null的，于是它开始创建实例，就在这个时候，CPU发生时间片切换，线程B开始执行，它要使用LazySingleton，调用getInstance()方法，同样检测到instance是null——注意，这是在A检测完之后切换的，也就是说A并没有来得及创建对象——因此B开始创建。B创建完成后，切换到A继续执行，因为它已经检测完了，所以A不会再检测一遍，它会直接创建对象。这样，线程A和B各自拥有一个LazySingleton的对象——单例失败.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">DP1_4</span><span class="o">.</span><span class="na">Singleton</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SynchronizedSingleton</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">SynchronizedSingleton</span> <span class="n">instance</span><span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//私有构造方法</span>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">SynchronizedSingleton</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//加synchronized关键字的静态工厂方法</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kd">static</span> <span class="n">SynchronizedSingleton</span> <span class="nf">getInstance</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SynchronizedSingleton</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>给getInstance方法加上synchronzied方法，一个线程必须等待另一个线程创建完后才能调用该方法，这时单例类的对象已经产生，再判断instance == null就会失败，保证了单例的唯一性.<br></p>

<h3>同步单例类性能提升</h3>

<p>参考资料:<br>
1. <a href="http://devbean.blog.51cto.com/448512/203501">http://devbean.blog.51cto.com/448512/203501</a><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java String对象的内存机制]]></title>
    <link href="http://www.regenthypo.com/blog/2016/03/24/java-string/"/>
    <updated>2016-03-24T13:59:12+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/03/24/java-string</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comparator接口和Comparable接口]]></title>
    <link href="http://www.regenthypo.com/blog/2016/03/21/comparator-and-comparable/"/>
    <updated>2016-03-21T19:22:29+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/03/21/comparator-and-comparable</id>
    <content type="html"><![CDATA[<p>当需要排序的集合或数组不是单纯的数字型时，通常可以使用Comparator或Comparable接口，以简单的方式实现对象排序或自定义排序.<br></p>

<p>Comparator接口源代码<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">T</span> <span class="n">o1</span><span class="o">,</span> <span class="n">T</span> <span class="n">o2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comparator接口:<br>
强行对某个对象collection进行整体排序的比较函数.可以将Comparator传递给sort方法(如Collections.sort或Arrays.sort)，从而允许在排序顺序上实现精确控制.还可以使用Comparator来控制某些数据结构(如有序set或有序映射)的顺序,或者为那些没有自然顺序地对象collection提供排序.<br>
Comparator接口中有两个未实现的方法，但是不一定要实现equals方法，除非有特殊的性能需要，因为无论何时创建一个类，都是间接继承自Object,而Object带有equals方法。所以只需要默认的Object的equals方法就可以满足接口的要求了.<br>
<font color=#FF0000>基本类型无法使用Comparator进行排序.</font><br></p>

<p>Collections类中有两个重载的sort方法:<br>
<img src="http://www.regenthypo.com/images/cc5.jpg">
<img src="http://www.regenthypo.com/images/cc2.jpg"></p>

<p><img src="http://www.regenthypo.com/images/cc6.jpg">
<img src="http://www.regenthypo.com/images/cc3.jpg"></p>

<p><font color=#FF0000>其实Collections类中的两个重载sort方法在源代码实现上是调用了Arrays类中的sort方法(见上两图红框中调用).</font><br></p>

<p>Arrays类中有很多重载的sort方法:<br>
分为两大类，一类是对基本数据类型的数组的排序方法，采用DualPivotQuicksort(多路快排)进行排序;<br>
另一类是引用类型的数组的排序排序方法，采用MergeSort(稳定归并排序)来进行排序;<br></p>

<p>Arrays中sort方法可以传Comparator参数的两个方法：
<img src="http://www.regenthypo.com/images/cc9.jpg">
<img src="http://www.regenthypo.com/images/cc7.jpg"></p>

<p><img src="http://www.regenthypo.com/images/cc10.jpg">
<img src="http://www.regenthypo.com/images/cc8.jpg"></p>

<p>Comparator接口使用实例：<br></p>

<figure class='code'><figcaption><span>hashmapSort.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">hypo</span><span class="o">.</span><span class="na">collection</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//HashMap根据值排序</span>
</span><span class='line'><span class="c1">//通过把HashMap中的所有Entry存入一个List,然后调用collection的sort进行排序操作.</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">hashmapSort</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">hm</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;b&#39;</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>      <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;a&#39;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;c&#39;</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</span><span class='line'>      <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;d&#39;</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>      <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;e&#39;</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>      <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;f&#39;</span><span class="o">,</span><span class="mi">4</span> <span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//Map.Entry&lt;K,V&gt;是接口，其方法有getKey(),getValue()等.</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">info</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;&gt;(</span><span class="n">hm</span><span class="o">.</span><span class="na">entrySet</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//排序前</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">info</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">;</span><span class="n">i</span><span class="o">++)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">info</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//排序</span>
</span><span class='line'>      <span class="c1">//通过把HashMap中的所有Entry存入一个List,然后调用collection的sort进行排序操作.</span>
</span><span class='line'>      <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">info</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;&gt;()</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">o1</span><span class="o">,</span>
</span><span class='line'>                  <span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">o2</span><span class="o">)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="c1">// TODO Auto-generated method stub</span>
</span><span class='line'>              <span class="k">return</span> <span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">getValue</span><span class="o">()</span> <span class="o">-</span> <span class="n">o2</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;===============================&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">//排序后</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">info</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">info</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>hashmapSort.java运行结果：<br>
<img src="http://www.regenthypo.com/images/cc4.jpg"></p>

<p>可以看程序中Collections.sort调用的关系:<br>
<img src="http://www.regenthypo.com/images/cc1.jpg"></p>

<p>Comparable接口源代码<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">T</span> <span class="n">o</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comparable接口：此接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的 compareTo 方法被称为它的自然比较方法。实现此接口的对象列表（和数组）可以通过 Collections.sort（和 Arrays.sort）进行
<font color=#FF0000>自动排序</font>
实现此接口的对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。<br>
java.lang.Comparable接口，使你的类具有“天生”的比较能力.此接口很简单，只有compareTo()一个方法.此方法接受另一个Object为参数，
如果当前对象小于参数则返回负值，如果相等则返回零，如果当前对象大于参数则返回正值.</p>

<p>Comparable接口使用实例:<br></p>

<figure class='code'><figcaption><span>comparableTest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">hypo</span><span class="o">.</span><span class="na">collection</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Student</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">float</span> <span class="n">score</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">age</span> <span class="o">,</span><span class="kt">float</span> <span class="n">score</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="c1">// TODO Auto-generated constructor stub</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">score</span> <span class="o">=</span> <span class="n">score</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="c1">// TODO Auto-generated method stub</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot;\t&quot;</span> <span class="o">+</span> <span class="n">age</span> <span class="o">+</span><span class="s">&quot;\t&quot;</span> <span class="o">+</span> <span class="n">score</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">Student</span> <span class="n">o</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="c1">// TODO Auto-generated method stub</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">score</span> <span class="o">&gt;</span> <span class="n">o</span><span class="o">.</span><span class="na">score</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">score</span> <span class="o">&lt;</span> <span class="n">o</span><span class="o">.</span><span class="na">score</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">&gt;</span> <span class="n">o</span><span class="o">.</span><span class="na">age</span><span class="o">)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">&lt;</span> <span class="n">o</span><span class="o">.</span><span class="na">age</span><span class="o">)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">comparableTest</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="c1">// TODO Auto-generated method stub</span>
</span><span class='line'>      <span class="n">Student</span> <span class="n">student</span><span class="o">[]</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">new</span> <span class="nf">Student</span><span class="o">(</span><span class="s">&quot;Lily&quot;</span><span class="o">,</span> <span class="mi">20</span> <span class="o">,</span> <span class="mf">90.0f</span><span class="o">),</span>
</span><span class='line'>              <span class="k">new</span> <span class="nf">Student</span><span class="o">(</span><span class="s">&quot;Suny&quot;</span> <span class="o">,</span><span class="mi">22</span> <span class="o">,</span> <span class="mf">91.0f</span><span class="o">),</span>
</span><span class='line'>              <span class="k">new</span> <span class="nf">Student</span><span class="o">(</span><span class="s">&quot;Sady&quot;</span> <span class="o">,</span><span class="mi">23</span> <span class="o">,</span> <span class="mf">90.0f</span><span class="o">),</span>
</span><span class='line'>              <span class="k">new</span> <span class="nf">Student</span><span class="o">(</span><span class="s">&quot;Tomy&quot;</span> <span class="o">,</span><span class="mi">25</span> <span class="o">,</span> <span class="mf">88.0f</span><span class="o">),</span>
</span><span class='line'>              <span class="k">new</span> <span class="nf">Student</span><span class="o">(</span><span class="s">&quot;Jimy&quot;</span> <span class="o">,</span><span class="mi">25</span> <span class="o">,</span> <span class="mf">99.0f</span><span class="o">)</span>
</span><span class='line'>      <span class="o">};</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;===排序前===&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="n">Student</span> <span class="n">s</span> <span class="o">:</span> <span class="n">student</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;===排序后===&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="n">Student</span> <span class="n">s</span> <span class="o">:</span> <span class="n">student</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>comparableTest.java运行结果：<br>
<img src="http://www.regenthypo.com/images/cc11.jpg"></p>

<p>总结:<br>
两种方法各有优劣, 用Comparable 简单, 只要实现Comparable 接口的对象直接就成为一个可以比较的对象,
但是需要修改源代码, 用Comparator 的好处是不需要修改源代码, 而是另外实现一个比较器, 当某个自定义
的对象需要作比较的时候,把比较器和对象一起传递过去就可以比大小了, 并且在Comparator 里面用户可以自
己实现复杂的可以通用的逻辑,使其可以匹配一些比较简单的对象,那样就可以节省很多重复劳动了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java集合]]></title>
    <link href="http://www.regenthypo.com/blog/2016/03/21/java-collection/"/>
    <updated>2016-03-21T19:07:56+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/03/21/java-collection</id>
    <content type="html"><![CDATA[<p>Java集合框架图<br>
<img src="http://www.regenthypo.com/images/jc1.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java正则表达式]]></title>
    <link href="http://www.regenthypo.com/blog/2016/03/20/java-regex/"/>
    <updated>2016-03-20T10:32:51+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/03/20/java-regex</id>
    <content type="html"><![CDATA[<p><img src="http://www.regenthypo.com/images/regex1.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java虚拟机]]></title>
    <link href="http://www.regenthypo.com/blog/2016/03/18/jvm/"/>
    <updated>2016-03-18T16:50:36+08:00</updated>
    <id>http://www.regenthypo.com/blog/2016/03/18/jvm</id>
    <content type="html"><![CDATA[<h2>Java运行时数据区内存分布</h2>

<p><img src="http://www.regenthypo.com/images/jvm_1.jpg"></p>

<h2>Java对象在堆中的内存结构</h2>

<h3>Java对象再内存中是怎样分配的呢?<br></h3>

<p>一旦对象在堆中分配了空间，那本质上是一系列的字节，那么如何才能找到对象中的某个特定的属性域呢?<br>
编译器通过一个内部表来保存每个域的偏移量.<br></p>

<p>下图是Base类的一个对象内存分布图.Base类没有定义任何方法.<br>
<img src="http://www.regenthypo.com/images/jvm_2.jpg"></p>

<p>如果还有另一个子类Derived继承了Base类，那么内存分布如下图:<br>
<img src="http://www.regenthypo.com/images/jvm_3.jpg"></p>

<p>子类对象和父类对象拥有同样的内存分布.当然,子类对象需要更多的空间来存放新的属性.<br>
<font color=#FF0000>这种分配的好处在于Base类型的引用如果引用了Derived的对象，仍然在开头的地方"看见"Base对象</font><br>
<font color=#FF0000>因此，使用父类(Base)引用来操作子类(Derived)对象,保证是安全的.因此在运行时不需要动态地检查</font><br>
<font color=#FF0000>Base引用的实际类型.</font><br></p>

<p>同样的道理，方法也可以放到object空间的开始处,如下图:<br>
<img src="http://www.regenthypo.com/images/jvm_4.jpg"></p>

<p>然而这种实现方式是没有效率的.假若一个类有很多方法(例如20个),那么每个对象就要持有20个指针,相应的,每个对象都需要20个指针的内存空间,这会导致创建对象变慢,所占空间更大<br></p>

<p>优化手段是创建一个 虚拟函数表(vtable,虚表),虚表是一个指向特定类的成员函数的指针数组. 如下图:<br>
<img src="http://www.regenthypo.com/images/jvm_5.jpg"></p>

<h2>java语法糖<br></h2>
]]></content>
  </entry>
  
</feed>
